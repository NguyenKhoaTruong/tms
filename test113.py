# import numpy as np
# from sklearn.cluster import KMeans

# # data = np.array(
# #     [
# #         [10.77113586, 106.69507197],
# #         [20.4471621, 106.3271365],
# #         [20.85134403, 104.70464633],
# #         [20.42371822, 106.15880283],
# #         [20.91653852, 106.10661156],
# #         [15.85845772, 108.38838888],
# #         [11.03297581, 106.3542277],
# #         [10.89934761, 106.413231],
# #         [11.02517305, 106.3870693],
# #         [10.95523884, 106.6061324],
# #         [10.89015757, 106.6345503],
# #         [10.8965339, 106.6406705],
# #         [10.92449731, 106.5581646],
# #         [11.00698019, 106.3945347],
# #         [10.75799883, 106.6517412],
# #         [10.6478613, 106.5443319],
# #         [10.82822741, 106.77336908],
# #         [10.82723716, 106.6794705],
# #         [10.81171075, 106.63303319],
# #         [10.81786736, 106.61473196],
# #         [10.95218402, 106.89048764],
# #         [11.08452259, 107.17174402],
# #         [10.97293634, 106.9087748],
# #         [10.41233104, 107.19334947],
# #         [10.7411686, 106.93110679],
# #         [10.91145535, 106.86081747],
# #         [10.91084718, 106.69956077],
# #         [10.90756332, 106.71699806],
# #         [10.9110862, 106.70034263],
# #         [10.97184749, 106.73379023],
# #         [10.89629671, 106.72605695],
# #         [11.130025, 106.60041292],
# #         [10.9196927, 106.73034889],
# #         [10.99520076, 106.7077929],
# #         [10.9462437, 106.74889584],
# #         [10.74348666, 106.66055661],
# #         [10.75535156, 106.72962653],
# #         [10.75102739, 106.611277],
# #         [10.82819579, 106.77336908],
# #         [10.62991908, 106.71692133],
# #         [10.75103568, 106.61127196],
# #         [13.98703149, 107.99237541],
# #         [10.75587277, 106.7429258],
# #         [10.87566266, 106.73057726],
# #         [10.86084919, 106.6889496],
# #         [10.83968566, 106.64933707],
# #         [10.83540448, 106.63442137],
# #         [10.79873893, 106.58475074],
# #         [10.80628542, 106.6663891],
# #         [10.82414119, 106.69220603],
# #         [10.73767299, 106.725445],
# #         [10.83377244, 106.67065955],
# #         [10.7544177, 106.65163804],
# #         [10.73710059, 106.72539996],
# #         [10.81941011, 106.70194893],
# #         [10.78085784, 106.6316055],
# #         [10.78066716, 106.63178008],
# #         [10.82591478, 106.6801289],
# #         [10.70215679, 106.60922572],
# #         [10.70283233, 106.71408888],
# #         [10.8246703, 106.69164404],
# #         [10.75422916, 106.65166244],
# #         [10.79108213, 106.70519867],
# #         [10.74564541, 106.73286228],
# #         [10.8013588, 106.653579],
# #         [10.78666843, 106.64503577],
# #         [13.08993814, 109.31141598],
# #         [10.76957072, 106.69274919],
# #         [10.81688208, 106.61131643],
# #         [10.79735553, 106.61826074],
# #         [10.85350155, 106.60256739],
# #         [10.70523375, 106.59819259],
# #         [10.77247441, 106.69799557],
# #         [10.54631971, 106.38636461],
# #         [10.98667209, 106.71588107],
# #         [10.81893264, 106.62771111],
# #         [10.77113589, 106.69506125],
# #         [20.4414449, 106.1574427],
# #         [21.58609986, 105.84283182],
# #         [10.76519279, 106.63421038],
# #         [10.82313791, 106.68556492],
# #         [10.754276, 106.65038487],
# #     ]
# # )
# # data = np.array(
# #     [
# #         [10.76494905, 106.63425263],
# #         [10.80654415, 106.63419073],
# #         [10.76407979, 106.57976891],
# #         [10.7400531, 106.73387648],
# #         [10.79008932, 106.64003442],
# #         [10.82361435, 106.68602501],
# #         [10.76510526, 106.60136309],
# #         [10.73252319, 106.70693794],
# #         [10.77968236, 106.63120246],
# #         [10.82526124, 106.70667993],
# #         [10.73769961, 106.72571768],
# #         [10.82866704, 106.67410763],
# #         [10.77849179, 106.66544417],
# #         [10.7410835, 106.70203763],
# #         [10.82395543, 106.69219394],
# #         [10.83674148, 106.68341207],
# #         [10.83382762, 106.67059324],
# #         [10.92673758, 106.55686148],
# #         [10.74950402, 106.65453533],
# #         [10.95901629, 106.50469228],
# #         [10.7547127, 106.633261],
# #         [10.69472676, 106.58839643],
# #         [10.86442298, 106.58982154],
# #         [10.76906319, 106.65309533],
# #         [10.73935071, 106.62920119],
# #         [10.76761123, 106.68591328],
# #         [10.76904968, 106.6657765],
# #         [10.75364472, 106.6133353],
# #         [10.82728301, 106.81193994],
# #         [10.76295414, 106.65702261],
# #         [10.75631753, 106.69231771],
# #         [10.80530015, 106.67858332],
# #         [10.75511243, 106.69004244],
# #         [10.6855854, 106.62249707],
# #         [10.79623274, 106.7405364],
# #         [10.74838756, 106.70536196],
# #         [10.82428508, 106.68272749],
# #         [10.83493002, 106.66219502],
# #         [10.82608672, 106.81733426],
# #         [10.86822489, 106.73579149],
# #         [10.73663306, 106.61394474],
# #         [10.76027751, 106.66189974],
# #         [10.74433337, 106.65502917],
# #         [10.85905418, 106.77776524],
# #         [10.80140875, 106.61857143],
# #         [10.82793967, 106.72155997],
# #         [10.82839675, 106.62040336],
# #         [10.79911036, 106.68928578],
# #         [10.84141666, 106.74553243],
# #         [10.74285159, 106.61222465],
# #         [10.69713383, 106.59701609],
# #         [10.88967811, 106.59629605],
# #         [10.79777172, 106.65901639],
# #         [10.73362232, 106.67453329],
# #         [10.78684742, 106.67529388],
# #         [10.77469691, 106.67481141],
# #         [10.77034333, 106.6292236],
# #         [10.77184099, 106.67001309],
# #         [10.76848879, 106.6680193],
# #         [10.89545954, 106.62185635],
# #     ]
# # )
# # data_Point = []
# # num_clusters = 10
# # kmeans = KMeans(
# #     n_clusters=num_clusters, init="k-means++", n_init=10, max_iter=100, tol=1e-4
# # )
# # kmeans.fit(data)
# # centroids = kmeans.cluster_centers_
# # labels = kmeans.labels_
# # for i in range(num_clusters):
# #     cluster_points = data[labels == i]
# #     data_Point.append(cluster_points)
# # print(data_Point)
# # print(len(data_Point))
# from decimal import Decimal

# data_sum = [
#     [Decimal("938.72000"), Decimal("3.97000"), 10.764949051934444, 106.63425262680195],
#     [Decimal("1897.28000"), Decimal("8.03000"), 10.806544151486372, 106.63419073199863],
#     [Decimal("244.91000"), Decimal("1.37000"), 10.764079789979318, 106.57976890751715],
#     [Decimal("1897.28000"), Decimal("8.03000"), 10.7400530995737, 106.7338764787851],
#     [Decimal("1299.50000"), Decimal("6.77000"), 10.790089319833042, 106.64003441699646],
#     [Decimal("1785.24000"), Decimal("8.15000"), 10.823614351505748, 106.68602501436756],
#     [Decimal("510.32000"), Decimal("3.60000"), 10.765105259503555, 106.6013630947109],
#     [Decimal("1272.02000"), Decimal("10.10000"), 10.732523192626422, 106.7069379362698],
#     [Decimal("1897.28000"), Decimal("8.03000"), 10.779682363758237, 106.63120245625056],
#     [Decimal("1897.28000"), Decimal("8.03000"), 10.825261241106542, 106.70667993346213],
#     [Decimal("898.53000"), Decimal("4.37000"), 10.737699613991722, 106.72571767515892],
#     [Decimal("1279.91000"), Decimal("5.62000"), 10.828667037403232, 106.67410762602444],
#     [Decimal("412.29000"), Decimal("3.06000"), 10.778491793268698, 106.66544417327842],
#     [Decimal("936.23000"), Decimal("5.13000"), 10.741083499365942, 106.70203763215794],
#     [
#         Decimal("1870.61000"),
#         Decimal("10.39000"),
#         10.823955431371676,
#         106.69219393905452,
#     ],
#     [Decimal("0.00000"), Decimal("0.00000"), 10.836741476104356, 106.68341207235753],
#     [
#         Decimal("1952.54000"),
#         Decimal("11.32000"),
#         10.833827624045112,
#         106.67059323605213,
#     ][
#         Decimal("1459.53000"),
#         Decimal("10.38000"),
#         10.926737581225254,
#         106.55686147657384,
#     ],
#     [Decimal("971.34000"), Decimal("5.89000"), 10.749504024802121, 106.65453533199823],
#     [Decimal("555.85000"), Decimal("2.70000"), 10.959016288745774, 106.50469227862662],
#     [Decimal("127.82000"), Decimal("0.64000"), 10.754712703279315, 106.63326099624115],
#     [Decimal("423.05000"), Decimal("3.06000"), 10.694726756700211, 106.58839643199786],
#     [Decimal("207.80000"), Decimal("1.09000"), 10.864422978832003, 106.58982153727769],
#     [Decimal("495.15000"), Decimal("3.31000"), 10.769063188224223, 106.6530953335917],
#     [Decimal("699.50000"), Decimal("5.26000"), 10.739350713879652, 106.62920119338125],
#     [
#         Decimal("1666.56000"),
#         Decimal("11.93000"),
#         10.767611232403523,
#         106.68591328391079,
#     ],
#     [Decimal("1852.01000"), Decimal("9.39000"), 10.769049682361974, 106.66577650080094],
#     [Decimal("318.42000"), Decimal("2.46000"), 10.753644717579572, 106.6133352973548],
#     [
#         Decimal("1076.59000"),
#         Decimal("11.70000"),
#         10.827283008576414,
#         106.81193993662411,
#     ],
#     [Decimal("715.75000"), Decimal("4.35000"), 10.762954140781089, 106.65702261420729],
#     [Decimal("211.94000"), Decimal("1.09000"), 10.756317534699074, 106.69231770751723],
#     [Decimal("592.54000"), Decimal("4.26000"), 10.8053001493701, 106.67858331832046],
#     [Decimal("187.04000"), Decimal("1.82000"), 10.755112433441516, 106.690042442933],
#     [Decimal("528.98000"), Decimal("3.52000"), 10.685585396099569, 106.62249706823035],
#     [Decimal("1766.69000"), Decimal("9.45000"), 10.796232738243804, 106.74053639547414],
#     [Decimal("725.13000"), Decimal("3.81000"), 10.74838755597344, 106.70536196146102],
#     [Decimal("298.39000"), Decimal("2.46000"), 10.824285079737, 106.68272749434792],
#     [Decimal("345.04000"), Decimal("2.48000"), 10.834930016798408, 106.66219501977464],
#     [Decimal("203.50000"), Decimal("1.15000"), 10.826086717333506, 106.8173342644842],
#     [Decimal("190.15000"), Decimal("1.23000"), 10.868224893898695, 106.73579148784809],
#     [
#         Decimal("1233.50000"),
#         Decimal("11.50000"),
#         10.736633059860063,
#         106.61394473840016,
#     ],
#     [Decimal("486.95000"), Decimal("2.67000"), 10.760277509184522, 106.66189973845366],
#     [Decimal("595.75000"), Decimal("4.09000"), 10.744333365337354, 106.6550291679002],
#     [Decimal("521.67000"), Decimal("3.48000"), 10.859054175855906, 106.77776523805082],
#     [Decimal("276.56000"), Decimal("1.34000"), 10.801408751565196, 106.61857143060715],
#     [Decimal("784.52000"), Decimal("4.83000"), 10.827939670249133, 106.72155997085434],
#     [Decimal("347.72000"), Decimal("2.54000"), 10.82839675280384, 106.62040335765374],
#     [Decimal("962.42000"), Decimal("6.53000"), 10.799110364054618, 106.68928577973072],
#     [Decimal("254.95000"), Decimal("1.86000"), 10.841416660990014, 106.74553242680346],
#     [Decimal("820.09000"), Decimal("6.30000"), 10.742851589208437, 106.61222465012885],
#     [Decimal("865.84000"), Decimal("4.87000"), 10.697133834421798, 106.59701609367342],
#     [Decimal("1543.29000"), Decimal("8.76000"), 10.889678105562988, 106.59629605320778],
#     [Decimal("371.41000"), Decimal("2.13000"), 10.797771718316245, 106.65901639259019],
#     [Decimal("511.83000"), Decimal("4.38000"), 10.733622324592591, 106.67453328509292],
#     [Decimal("316.24000"), Decimal("2.01000"), 10.786847420293347, 106.67529388446025],
#     [Decimal("204.96000"), Decimal("1.50000"), 10.774696907976047, 106.6748114060552],
#     [Decimal("346.06000"), Decimal("2.61000"), 10.770343333676342, 106.62922359949961],
#     [Decimal("685.35000"), Decimal("5.42000"), 10.771840987231569, 106.67001309064219],
#     [Decimal("488.17000"), Decimal("3.40000"), 10.76848878704559, 106.66801929683373],
#     [Decimal("325.36000"), Decimal("2.01000"), 10.895459536628419, 106.62185634562174],
# ]
# for value in data_sum:
#     print(value)
# data = [
#     [
#         [10.82361435, 106.68602501],
#         [10.82526124, 106.70667993],
#         [10.82866704, 106.67410763],
#         [10.82395543, 106.69219394],
#         [10.83674148, 106.68341207],
#         [10.83382762, 106.67059324],
#         [10.80530015, 106.67858332],
#         [10.82428508, 106.68272749],
#         [10.83493002, 106.66219502],
#         [10.79911036, 106.68928578],
#     ],
#     [
#         [10.80654415, 106.63419073],
#         [10.79008932, 106.64003442],
#         [10.77968236, 106.63120246],
#         [10.80140875, 106.61857143],
#         [10.82839675, 106.62040336],
#     ],
#     [
#         [10.7400531, 106.73387648],
#         [10.73252319, 106.70693794],
#         [10.73769961, 106.72571768],
#         [10.7410835, 106.70203763],
#         [10.75631753, 106.69231771],
#         [10.75511243, 106.69004244],
#         [10.74838756, 106.70536196],
#         [10.73362232, 106.67453329],
#     ],
#     [
#         [10.79623274, 106.7405364],
#         [10.86822489, 106.73579149],
#         [10.85905418, 106.77776524],
#         [10.82793967, 106.72155997],
#         [10.84141666, 106.74553243],
#     ],
#     [[10.92673758, 106.55686148], [10.95901629, 106.50469228]],
#     [
#         [10.69472676, 106.58839643],
#         [10.6855854, 106.62249707],
#         [10.69713383, 106.59701609],
#     ],
#     [
#         [10.76494905, 106.63425263],
#         [10.76407979, 106.57976891],
#         [10.76510526, 106.60136309],
#         [10.7547127, 106.633261],
#         [10.73935071, 106.62920119],
#         [10.75364472, 106.6133353],
#         [10.73663306, 106.61394474],
#         [10.74285159, 106.61222465],
#         [10.77034333, 106.6292236],
#     ],
#     [
#         [10.86442298, 106.58982154],
#         [10.88967811, 106.59629605],
#         [10.89545954, 106.62185635],
#     ],
#     [
#         [10.77849179, 106.66544417],
#         [10.74950402, 106.65453533],
#         [10.76906319, 106.65309533],
#         [10.76761123, 106.68591328],
#         [10.76904968, 106.6657765],
#         [10.76295414, 106.65702261],
#         [10.76027751, 106.66189974],
#         [10.74433337, 106.65502917],
#         [10.79777172, 106.65901639],
#         [10.78684742, 106.67529388],
#         [10.77469691, 106.67481141],
#         [10.77184099, 106.67001309],
#         [10.76848879, 106.6680193],
#     ],
#     [[10.82728301, 106.81193994], [10.82608672, 106.81733426]],
# ]
# for value in data:
#     print(len(value))
#     a = []
#     for item in value:
#         lat = item[0]
#         lon = item[1]
#         for a in data_sum:
#             print("check vlaue data", a)
# if lat == data_[2] and lon == data_[3]:
#     print(data_)
#             a.append(item)

# # print("check value a", a, len(a))
# import sys
# from PyQt5.QtWidgets import QApplication, QMainWindow, QComboBox, QVBoxLayout, QWidget


# class MyWindow(QMainWindow):
#     def __init__(self):
#         super().__init__()

#         self.setWindowTitle("ComboBox Example")
#         self.setGeometry(100, 100, 400, 200)

#         layout = QVBoxLayout()

#         self.comboBox = QComboBox(self)

#         # Thêm các mục và gán giá trị dữ liệu cho mỗi mục
#         self.comboBox.addItem("Item 1", "Value 1")
#         self.comboBox.addItem("Item 2", "Value 2")
#         self.comboBox.addItem("Item 3", "Value 3")
#         self.comboBox.addItem("Item 4", "Value 4")

#         layout.addWidget(self.comboBox)

#         widget = QWidget()
#         widget.setLayout(layout)
#         self.setCentralWidget(widget)

#         # Lấy giá trị dữ liệu của mục được chọn
#         selected_data = self.comboBox.currentData()
#         print("check value data", selected_data)
#         # if selected_data is not None:
#         #     print("Selected Value:", selected_data)


# if __name__ == "__main__":
#     app = QApplication(sys.argv)
#     window = MyWindow()
#     window.show()
#     sys.exit(app.exec_())
# data = [[1], [2]]
# for value in data:
#     print(value)
# import pandas as pd
# from sklearn.cluster import KMeans

# # Dữ liệu mẫu
# data = {
#     "Order ID": [1, 2, 3, 4, 5, 6, 7, 8],
#     "Latitude": [
#         10.8103313427681,
#         10.835090502442426,
#         10.871949752206877,
#         10.850570903358864,
#         10.800309687955748,
#         10.795161785387753,
#         10.785874509961294,
#         10.806303945209098,
#     ],
#     "Longitude": [
#         106.66496449857675,
#         106.72946758939347,
#         106.73123051122782,
#         106.77179624086384,
#         106.66658745393455,
#         106.72217553038185,
#         106.68089134150532,
#         106.71609936541935,
#     ],
#     "Tải trọng xe (kg)": [1000, 800, 1200, 600, 900, 1100, 700, 950],
#     "Khối lượng xe (m3)": [20, 18, 25, 15, 22, 24, 17, 21],
#     "Loại tải trọng": [
#         "Nhẹ",
#         "Nhẹ",
#         "Nặng",
#         "Nhẹ",
#         "Trung bình",
#         "Nặng",
#         "Nhẹ",
#         "Trung bình",
#     ],
#     "Loại khối lượng": [
#         "Lớn",
#         "Trung bình",
#         "Lớn",
#         "Nhỏ",
#         "Lớn",
#         "Lớn",
#         "Trung bình",
#         "Lớn",
#     ],
# }

# df = pd.DataFrame(data)

# # Mã hóa loại tải trọng và loại khối lượng thành số
# encoding = {"Nhẹ": 1, "Trung bình": 2, "Nặng": 3, "Nhỏ": 1, "Trung bình": 2, "Lớn": 3}

# df["Loại tải trọng (encoded)"] = df["Loại tải trọng"].map(encoding)
# df["Loại khối lượng (encoded)"] = df["Loại khối lượng"].map(encoding)

# # Sử dụng K-means trên dữ liệu đã mã hóa
# X = df[["Latitude", "Longitude", "Loại tải trọng (encoded)"]]
# print("check vlaue data x", X)
# kmeans = KMeans(n_clusters=3).fit(X)
# df["Vị trí cụm"] = kmeans.labels_

# # In dữ liệu sau khi phân loại và phân cụm
# print(df)
# Tính toán khoảng cách dựa trên latitude và longitude (Haversine distance)
from sklearn.metrics.pairwise import haversine_distances
from math import radians
import pandas as pd
from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler

data = pd.read_csv("data.csv")

scaler = StandardScaler()
data[["payload"]] = scaler.fit_transform(data[["payload"]])
data["lat_rad"] = data["lat"].apply(lambda x: radians(x))
data["lon_rad"] = data["lon"].apply(lambda x: radians(x))
coords = data[["lat_rad", "lon_rad"]]
data["haversine"] = haversine_distances(coords, coords) * 6371000
kmeans = KMeans(n_clusters=3)
data["cluster"] = kmeans.fit_predict(data[["haversine"]])
big_payload_clusters = data[data["payload"] > 100]

small_clusters = (
    big_payload_clusters.groupby("cluster").size().reset_index(name="count")
)

small_clusters["subcluster"] = range(1, len(small_clusters) + 1)
big_payload_clusters = big_payload_clusters.merge(
    small_clusters[["cluster", "subcluster"]], on="cluster", how="left"
)

big_payload_clusters["cluster"] = big_payload_clusters["subcluster"]
big_payload_clusters = big_payload_clusters.drop("subcluster", axis=1)

print(data)
