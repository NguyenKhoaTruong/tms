import matplotlib.pyplot as plt
from kneed import KneeLocator
from sklearn.cluster import KMeans

data1 = [
    [10.79873892744089, 106.58475073864138],
    [10.764949051934444, 106.63425262680195],
    [10.806544151486372, 106.63419073199863],
    [10.764079789979318, 106.57976890751715],
    [10.7400530995737, 106.7338764787851],
    [10.790089319833042, 106.64003441699646],
    [10.823614351505748, 106.68602501436756],
    [10.765105259503555, 106.6013630947109],
    [10.754275999507401, 106.65038486747628],
    [10.732523192626422, 106.7069379362698],
    [10.779682363758237, 106.63120245625056],
    [10.825261241106542, 106.70667993346213],
    [10.737699613991722, 106.72571767515892],
    [10.828667037403232, 106.67410762602444],
    [10.778491793268698, 106.66544417327842],
    [10.741083499365942, 106.70203763215794],
    [10.823955431371676, 106.69219393905452],
    [10.836741476104356, 106.68341207235753],
    [10.833827624045112, 106.67059323605213],
    [10.926737581225254, 106.55686147657384],
    [10.749504024802121, 106.65453533199823],
    [10.959016288745774, 106.50469227862662],
    [10.754712703279315, 106.63326099624115],
    [10.694726756700211, 106.58839643199786],
    [10.864422978832003, 106.58982153727769],
    [10.769063188224223, 106.6530953335917],
    [10.739350713879652, 106.62920119338125],
    [10.767611232403523, 106.68591328391079],
    [10.769049682361974, 106.66577650080094],
    [10.753644717579572, 106.6133352973548],
    [10.827283008576414, 106.81193993662411],
    [10.762954140781089, 106.65702261420729],
    [10.756317534699074, 106.69231770751723],
    [10.8053001493701, 106.67858331832046],
    [10.755112433441516, 106.690042442933],
    [10.685585396099569, 106.62249706823035],
    [10.796232738243804, 106.74053639547414],
    [10.74838755597344, 106.70536196146102],
    [10.824285079737, 106.68272749434792],
    [10.834930016798408, 106.66219501977464],
    [10.826086717333506, 106.8173342644842],
    [10.868224893898695, 106.73579148784809],
    [10.736633059860063, 106.61394473840016],
    [10.760277509184522, 106.66189973845366],
    [10.744333365337354, 106.6550291679002],
    [10.859054175855906, 106.77776523805082],
    [10.801408751565196, 106.61857143060715],
    [10.827939670249133, 106.72155997085434],
    [10.800965497496932, 106.65353682632195],
    [10.749530100247858, 106.70849129687295],
    [10.754222040359897, 106.6516615480369],
    [10.785468096971915, 106.64193116565633],
    [10.834527603648134, 106.66475695577076],
    [10.830911251743272, 106.61499504415322],
    [10.666857886706726, 106.72514616742377],
    [10.75313395509537, 106.7007388263215],
    [10.815241990112296, 106.67207382944194],
    [10.633211745181494, 106.76237678601967],
    [10.775691481392982, 106.63053733789408],
    [10.787963341854569, 106.69955300059291],
    [10.77059663982937, 106.66947987384219],
    [10.786610837486364, 106.64514608153063],
    [10.800918007998886, 106.65822371666304],
    [10.795012960576202, 106.72188184969707],
    [10.733809335017282, 106.70672371042879],
    [10.718509266117739, 106.74344459289748],
    [10.82839675280384, 106.62040335765374],
    [10.799110364054618, 106.68928577973072],
    [10.841416660990014, 106.74553242680346],
    [10.742851589208437, 106.61222465012885],
    [10.697133834421798, 106.59701609367342],
    [10.889678105562988, 106.59629605320778],
    [10.797771718316245, 106.65901639259019],
    [10.733622324592591, 106.67453328509292],
    [10.806044944318701, 106.6663870161133],
    [10.73155844576023, 106.60428459860847],
    [10.786847420293347, 106.67529388446025],
    [10.774696907976047, 106.6748114060552],
    [10.770343333676342, 106.62922359949961],
    [10.771840987231569, 106.67001309064219],
    [10.76848878704559, 106.66801929683373],
    [10.895459536628419, 106.62185634562174],
    [10.754229328356239, 106.66689834765585],
    [10.814001042568387, 106.6136347262402],
    [10.850868224726465, 106.66312291227648],
    [10.822702385984531, 106.629427464492],
    [10.774997863354868, 106.63099530416778],
    [10.768414647994026, 106.61687605079598],
    [10.774460153621625, 106.65657468434846],
    [10.793384404013407, 106.64185856693454],
    [10.684085751188704, 106.55215376089205],
    [10.797370644447689, 106.6203110869487],
    [10.778490394254115, 106.66544494233557],
]

# Danh sách các giá trị k bạn muốn thử nghiệm
k_values = range(1, len(data1)-1)  # Ví dụ, từ 1 đến 10

# Tạo danh sách để lưu trữ SSE cho từng giá trị k
sse = []

for k in k_values:
    kmeans = KMeans(n_clusters=k)
    kmeans.fit(data1)
    sse.append(kmeans.inertia_)

# Sử dụng KneeLocator để xác định giá trị tối ưu cho k
kl = KneeLocator(k_values, sse, curve="convex", direction="decreasing")

# Lấy giá trị tối ưu cho k
optimal_k = kl.elbow

# Vẽ biểu đồ Elbow
plt.figure(figsize=(8, 4))
plt.plot(k_values, sse, marker="o")
plt.xlabel("Số lượng cụm (k)")
plt.ylabel("Tổng bình phương khoảng cách (SSE)")
plt.title("Biểu đồ Elbow")
plt.xticks(k_values)
plt.vlines(
    optimal_k,
    plt.ylim()[0],
    plt.ylim()[1],
    linestyles="dashed",
    colors="r",
    label=f"Optimal k ({optimal_k})",
)
plt.legend()
plt.show()

print(f"Giá trị tối ưu cho k là: {optimal_k}")
